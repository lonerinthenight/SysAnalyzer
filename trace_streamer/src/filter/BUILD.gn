# Copyright (C) 2021 Huawei Device Co., Ltd.
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import("//build/ohos.gni")
import("../../build/ts.gni")

ohos_source_set("filter") {
  subsystem_name = "${OHOS_PROFILER_SUBSYS_NAME}"
  part_name = "${OHOS_PROFILER_PART_NAME}"
  sources = [
    "animation_filter.cpp",
    "animation_filter.h",
    "app_start_filter.cpp",
    "app_start_filter.h",
    "args_filter.cpp",
    "args_filter.h",
    "binder_filter.cpp",
    "binder_filter.h",
    "clock_filter_ex.cpp",
    "cpu_filter.cpp",
    "filter_base.cpp",
    "filter_base.h",
    "filter_filter.cpp",
    "filter_filter.h",
    "frame_filter.cpp",
    "frame_filter.h",
    "hi_sysevent_measure_filter.cpp",
    "hi_sysevent_measure_filter.h",
    "irq_filter.cpp",
    "irq_filter.h",
    "measure_filter.cpp",
    "measure_filter.h",
    "native_hook_filter.cpp",
    "native_hook_filter.h",
    "offline_symbolization_filter.cpp",
    "offline_symbolization_filter.h",
    "perf_data_filter.cpp",
    "perf_data_filter.h",
    "process_filter.cpp",
    "process_filter.h",
    "slice_filter.cpp",
    "slice_filter.h",
    "stat_filter.cpp",
    "stat_filter.h",
    "symbols_filter.cpp",
    "symbols_filter.h",
    "system_event_measure_filter.cpp",
    "system_event_measure_filter.h",
    "task_pool_filter.cpp",
    "task_pool_filter.h",
  ]

  if (!is_independent_compile) {
    configs = [ "${TS_DIR}/gn:ts_config" ]
  }
  if (enable_ts_utest && !use_wasm) {
    cflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
    ]
    ldflags = [
      "-fprofile-arcs",
      "-ftest-coverage",
      "--coverage",
    ]
    if (is_test) {
      cflags += [ "-D IS_UT" ]
    }
  }
  public_deps = [
    "${OHOS_TRACE_STREAMER_PROTOS_DIR}/protos/services:ts_all_type_cpp",
    "${OHOS_TRACE_STREAMER_PROTOS_DIR}/protos/types/plugins/native_hook:native_hook_data_reader",
    "${OHOS_TRACE_STREAMER_PROTOS_DIR}/protos/types/plugins/native_hook:ts_native_hook_cpp",
  ]
  deps = []
  include_dirs = [
    "${SRC}/base",
    "${SRC}/trace_streamer",
    "${SRC}/trace_data",
    "${SRC}/parser",
    "${SRC}/include",
    "${SRC}/filter",
    "${SRC}/cfg",
    "${SRC}",
    "${THIRD_PARTY}/protobuf/src",
    "${THIRD_PARTY}/sqlite/include",
    "${THIRD_PARTY}/perf_include/musl",
    "${THIRD_PARTY}/bounds_checking_function/include",
    "${THIRD_PARTY}/json/single_include/nlohmann",
    "../proto_reader/include",
    ".",
  ]

  if (is_mingw || is_mac) {
    include_dirs += [ "${THIRD_PARTY}/elfutils/libelf" ]
  }
}
