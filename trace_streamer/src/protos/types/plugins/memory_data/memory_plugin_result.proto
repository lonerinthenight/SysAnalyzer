// Copyright (c) 2021 Huawei Device Co., Ltd.
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

option java_package = "ohos.devtools.datasources.transport.grpc.service";
option optimize_for = LITE_RUNTIME;

import "memory_plugin_common.proto";

// Data format of memory collect plug-in.
// Various memory data count, including system level and application level.
// Obtained from the proc file system or system service.
message SysMeminfo {
    SysMeminfoType key = 1;
    uint64 value = 2;
};
message SysVMeminfo {
    SysVMeminfoType key = 1;
    uint64 value = 2;
};

message SmapsInfo {
    string start_addr = 1;
    string end_addr = 2;
    string permission = 3;
    string path = 4;
    uint64 size = 5; // kb
    uint64 rss = 6; // kb
    uint64 pss = 7; // kb
    double reside = 8;
    uint64 dirty = 9; // kb
    uint64 swapper = 10; // kb
    uint64 private_clean = 11; // kb
    uint64 private_dirty = 12; // kb
    uint64 shared_clean = 13; // kb
    uint64 shared_dirty = 14; // kb
    uint64 swap = 15; // kb
    uint64 swap_pss = 16; // kb
    string category = 17;
};

message AppSummary {
    uint64 java_heap = 1;
    uint64 native_heap = 2;
    uint64 code = 3;
    uint64 stack = 4;
    uint64 graphics = 5;
    uint64 private_other = 6;
    uint64 system = 7;
};

message ProcessMemoryInfo {
    int32 pid = 1;
    string name = 2;
    // data from /proc/$pid/stat
    uint64 vm_size_kb = 3;
    uint64 vm_rss_kb = 4;
    uint64 rss_anon_kb = 5;
    uint64 rss_file_kb = 6;
    uint64 rss_shmem_kb = 7;
    uint64 vm_swap_kb = 8;
    uint64 vm_locked_kb = 9;
    uint64 vm_hwm_kb = 10;
    int64 oom_score_adj = 11;
    // data from /proc/$pid/smaps
    repeated SmapsInfo smapinfo = 12;
    AppSummary memsummary = 13;
    uint64 purg_sum_kb = 14;
    uint64 purg_pin_kb = 15;
    // data from hidumper
    uint64 gl_pss_kb = 16;
    uint64 graph_pss_kb = 17;
}

message AshmemInfo {
    // data from /proc/purgeable_ashmem_trigger
    string name = 1;
    int32 pid = 2;
    int32 adj = 3;
    int32 fd = 4;
    string ashmem_name = 5;
    uint64 size = 6; // bytes
    int32 id = 7;
    uint64 time = 8;
    uint64 ref_count = 9;
    uint64 purged = 10;
}

message DmaInfo {
    // data from /proc/process_dmabuf_info
    string name = 1;
    int32 pid = 2;
    int32 fd = 3;
    uint64 size = 4; // bytes
    int32 ino = 5;
    int32 exp_pid = 6;
    string exp_task_comm = 7;
    string buf_name = 8;
    string exp_name = 9;
}
message GpuProcessInfo {
    string addr = 1;
    int32 pid = 2;
    int32 tid = 3;
    uint64 used_gpu_size = 4; // bytes
};
message GpuMemoryInfo {
    // data from /proc/gpu_memory
    string gpu_name = 1;
    uint64 all_gpu_size = 2; // bytes
    repeated GpuProcessInfo gpu_process_info = 3;
}

message GpuSubInfo {
    string category_name = 1;
    uint64 size = 2; // bytes
    int32 entry_num = 3;
};
message GpuDetailInfo {
    string module_name = 1;
    repeated GpuSubInfo gpu_sub_info = 2;
};
message GpuDumpInfo {
    // data from hidumper
    string window_name = 1;
    uint64 id = 2;
    repeated GpuDetailInfo gpu_detail_info = 3;
    uint64 gpu_purgeable_size = 4; // bytes
}

message RSImageDumpInfo {
    // data from hidumper
    uint64 size = 1; // bytes
    string type = 2;
    int32 pid = 3;
    string surface_name = 4;
}

message CpuDumpInfo {
    // data from hidumper
    uint64 total_cpu_memory_size = 1; // bytes
}

message WindowManagerServiceInfo {
    // data from hidumper
    string window_name = 1;
    int32 pid = 2;
}

message ProfileMemInfo {
    // /sys/kernel/debug/mali0/ctx/$(pidof xxx)_0/mem_profile
    string channel = 1;
    uint64 total_memory_size = 2; // bytes
}

message MemoryData {
    repeated ProcessMemoryInfo processesinfo = 1;
    repeated SysMeminfo meminfo = 2;
    repeated SysVMeminfo vmeminfo = 3;
    uint64 zram = 4;
    repeated AshmemInfo ashmeminfo = 5;
    repeated DmaInfo dmainfo = 6;
    repeated GpuMemoryInfo gpumemoryinfo = 7;
    repeated GpuDumpInfo gpudumpinfo = 8;
    uint64 gpu_limit_size = 9; // bytes
    uint64 gpu_used_size = 10; // bytes
    repeated RSImageDumpInfo rsdumpinfo = 11;
    repeated CpuDumpInfo cpudumpinfo = 12;
    repeated WindowManagerServiceInfo windowinfo = 13;
    repeated ProfileMemInfo profilememinfo = 14;
}
